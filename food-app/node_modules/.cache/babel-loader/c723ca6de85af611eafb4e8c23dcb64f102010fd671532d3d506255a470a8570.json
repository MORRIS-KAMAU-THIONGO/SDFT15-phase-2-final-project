{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create the CartContext to manage global cart state\nconst CartContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the CartContext\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\n// CartProvider component that wraps the app to provide cart functionality\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  // State to hold the items in the cart, initialized as an empty array\n  const [cartItems, setCartItems] = useState([]);\n\n  // Function to add an item to the cart\n  // If the item already exists, increment its quantity; otherwise, add it with quantity 1\n  const addToCart = item => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(cartItem => cartItem.id === item.id);\n      if (existingItem) {\n        // Increment quantity if item already in cart\n        return prevItems.map(cartItem => cartItem.id === item.id ? {\n          ...cartItem,\n          quantity: cartItem.quantity + 1\n        } : cartItem);\n      } else {\n        // Add new item with quantity 1\n        return [...prevItems, {\n          ...item,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Function to remove an item from the cart\n  // Decrement quantity if more than 1, otherwise remove the item entirely\n  const removeFromCart = itemId => {\n    setCartItems(prevItems => prevItems.map(item => item.id === itemId ? {\n      ...item,\n      quantity: item.quantity - 1\n    } : item).filter(item => item.quantity > 0));\n  };\n\n  // Function to clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate the total price of items in the cart\n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => {\n      // Extract numeric value from price string (e.g., \"Ksh 1200\" -> 1200)\n      const price = parseInt(item.price.replace('Ksh ', ''));\n      return total + price * item.quantity;\n    }, 0);\n  };\n\n  // Get the total number of items in the cart (sum of quantities)\n  const getCartItemCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n\n  // Value object containing all cart-related functions and state\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    clearCart,\n    getTotalPrice,\n    getCartItemCount\n  };\n  return /*#__PURE__*/React.createElement(CartContext.Provider, {\n    value\n  }, children);\n};\n_s2(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","cartItems","setCartItems","addToCart","item","prevItems","existingItem","find","cartItem","id","map","quantity","removeFromCart","itemId","filter","clearCart","getTotalPrice","reduce","total","price","parseInt","replace","getCartItemCount","count","value","createElement","Provider","_c","$RefreshReg$"],"sources":["/home/morrislinux/desktop/documents/Moringa-Projects/phase-2/SDFT15-phase-2-final-project/food-app/src/context/CartContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Create the CartContext to manage global cart state\nconst CartContext = createContext();\n\n// Custom hook to use the CartContext\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\n// CartProvider component that wraps the app to provide cart functionality\nexport const CartProvider = ({ children }) => {\n  // State to hold the items in the cart, initialized as an empty array\n  const [cartItems, setCartItems] = useState([]);\n\n  // Function to add an item to the cart\n  // If the item already exists, increment its quantity; otherwise, add it with quantity 1\n  const addToCart = (item) => {\n    setCartItems((prevItems) => {\n      const existingItem = prevItems.find((cartItem) => cartItem.id === item.id);\n      if (existingItem) {\n        // Increment quantity if item already in cart\n        return prevItems.map((cartItem) =>\n          cartItem.id === item.id\n            ? { ...cartItem, quantity: cartItem.quantity + 1 }\n            : cartItem\n        );\n      } else {\n        // Add new item with quantity 1\n        return [...prevItems, { ...item, quantity: 1 }];\n      }\n    });\n  };\n\n  // Function to remove an item from the cart\n  // Decrement quantity if more than 1, otherwise remove the item entirely\n  const removeFromCart = (itemId) => {\n    setCartItems((prevItems) =>\n      prevItems\n        .map((item) =>\n          item.id === itemId ? { ...item, quantity: item.quantity - 1 } : item\n        )\n        .filter((item) => item.quantity > 0)\n    );\n  };\n\n  // Function to clear all items from the cart\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  // Calculate the total price of items in the cart\n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => {\n      // Extract numeric value from price string (e.g., \"Ksh 1200\" -> 1200)\n      const price = parseInt(item.price.replace('Ksh ', ''));\n      return total + price * item.quantity;\n    }, 0);\n  };\n\n  // Get the total number of items in the cart (sum of quantities)\n  const getCartItemCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n\n  // Value object containing all cart-related functions and state\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    clearCart,\n    getTotalPrice,\n    getCartItemCount,\n  };\n\n  return React.createElement(CartContext.Provider, { value }, children);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}