{"ast":null,"code":"var _jsxFileName = \"/home/morrislinux/desktop/documents/Moringa-Projects/phase-2/SDFT15-phase-2-final-project/food-app/src/components/FoodList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FoodCard from './FoodCard';\n\n// FoodList component to display a list of food items for a specific category\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FoodList = ({\n  category\n}) => {\n  _s();\n  // State to hold the fetched food items\n  const [foods, setFoods] = useState([]);\n\n  // State to handle loading state while fetching data\n  const [loading, setLoading] = useState(true);\n\n  // State to handle any errors during data fetching\n  const [error, setError] = useState(null);\n\n  // useEffect hook to fetch data from the JSON server when category changes\n  useEffect(() => {\n    // Function to fetch food data from the API\n    const fetchFoods = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        // Fetch data from the JSON server endpoint based on category\n        const response = await fetch(`http://localhost:3001/${category}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch food data');\n        }\n        const data = await response.json();\n        setFoods(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Call the fetch function\n    fetchFoods();\n  }, [category]); // Dependency array: re-run when category changes\n\n  // Display loading message while data is being fetched\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display error message if there's an error fetching data\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"food-list\",\n    children: foods.map(food => /*#__PURE__*/_jsxDEV(FoodCard, {\n      food: food\n    }, food.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(FoodList, \"Ugt2RFi97Vw70iF8ZwUuI1mAcRM=\");\n_c = FoodList;\nexport default FoodList;\nvar _c;\n$RefreshReg$(_c, \"FoodList\");","map":{"version":3,"names":["React","useState","useEffect","FoodCard","jsxDEV","_jsxDEV","FoodList","category","_s","foods","setFoods","loading","setLoading","error","setError","fetchFoods","response","fetch","ok","Error","data","json","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","food","id","_c","$RefreshReg$"],"sources":["/home/morrislinux/desktop/documents/Moringa-Projects/phase-2/SDFT15-phase-2-final-project/food-app/src/components/FoodList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FoodCard from './FoodCard';\n\n// FoodList component to display a list of food items for a specific category\nconst FoodList = ({ category }) => {\n  // State to hold the fetched food items\n  const [foods, setFoods] = useState([]);\n\n  // State to handle loading state while fetching data\n  const [loading, setLoading] = useState(true);\n\n  // State to handle any errors during data fetching\n  const [error, setError] = useState(null);\n\n  // useEffect hook to fetch data from the JSON server when category changes\n  useEffect(() => {\n    // Function to fetch food data from the API\n    const fetchFoods = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        // Fetch data from the JSON server endpoint based on category\n        const response = await fetch(`http://localhost:3001/${category}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch food data');\n        }\n        const data = await response.json();\n        setFoods(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Call the fetch function\n    fetchFoods();\n  }, [category]); // Dependency array: re-run when category changes\n\n  // Display loading message while data is being fetched\n  if (loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  // Display error message if there's an error fetching data\n  if (error) {\n    return <div className=\"error\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"food-list\">\n      {/* Map over the foods array and render a FoodCard for each item */}\n      {foods.map((food) => (\n        <FoodCard key={food.id} food={food} />\n      ))}\n    </div>\n  );\n};\n\nexport default FoodList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;QACd;QACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyBV,QAAQ,EAAE,CAAC;QACjE,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,QAAQ,CAACU,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRX,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,IAAII,OAAO,EAAE;IACX,oBAAON,OAAA;MAAKmB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClD;;EAEA;EACA,IAAIhB,KAAK,EAAE;IACT,oBAAOR,OAAA;MAAKmB,SAAS,EAAC,OAAO;MAAAC,QAAA,GAAC,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACpD;EAEA,oBACExB,OAAA;IAAKmB,SAAS,EAAC,WAAW;IAAAC,QAAA,EAEvBhB,KAAK,CAACqB,GAAG,CAAEC,IAAI,iBACd1B,OAAA,CAACF,QAAQ;MAAe4B,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACrB,EAAA,CArDIF,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAuDd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}